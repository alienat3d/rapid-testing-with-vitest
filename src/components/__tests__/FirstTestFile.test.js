import { test, expect } from 'vitest';

// * 1.0 Итак, создадим наш первый файл для тестов Vitest. Он представляет из себя кусочек функционала, который мы хотим протестировать. Первым аргументом будет строка, чтобы описать о чём этот тест. Второй аргумент будет функцией, которая включает в себя непосредственно тест. Внутри функции мы можем использовать метод "expect", чтобы описать какое-то утверждение, например, что "1+1 равен 2". У метода "expect" есть ряд других утверждений, которые можно проверять.

// 1.1 Можно сразу заметить, что во время запуска теста Vitest не останавливается самостоятельно, а входит в режим слежения, перезапуская тест при изменениях, как это делает и Vite, например.

/* test('1 + 1', () => {
  expect(1 + 1).toEqual(2);
  expect(2 + 2).toEqual(4);
}); */

// * 2.0 А теперь чуть усложним тест и добавим внутрь тела кода функцию. Создадим менее тривиальный пример, который будет включать функцию сложения какого-то произвольного кол-ва чисел и возвращать их сумму.
// 2.3 Итак, добавим rest-оператор и метод "reduce", изменив функцию так, чтобы она прошла оба теста. rest-оператор позволит нам собрать все аргументы в один массив, а метод "reduce" пройдёт по всем числам в этом массиве и сложит их, используя "переменную-аккумулятор".
/* function sum(a, b, c) {
  return a + b + c;
} */
function sum(...nums) {
  return nums.reduce((a, b) => a + b, 0);
}

test('1 + 1', () => {
  expect(sum(1, 1)).toEqual(2);
});

// 2.1 Создадим ещё один тест, где предположим, что у нас 3 числа, которые надо сложить. Тест, конечно же, провалился, т.к. мы не учли в функции sum третьего аргумента. Но если мы добавим аргумент "c", то тест будет также провален, уже по первому тесту.
// ? 2.2 Это одна из причин почему тесты так важны — они помогают сразу же определить места потенциальных ошибок в существующем коде при добавлении новых фич. ↑

test('1 + 2 + 3', () => {
  expect(sum(1, 2, 3)).toEqual(6);
});

// 2.4 Мы можем добавить ещё несколько тестов, чтобы проверить разные случаи, например, когда у нас будет 10 чисел, когда только 1 число или вовсе не будет чисел.
test('10 numbers', () => {
  expect(sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)).toEqual(55);
});

test('1 number', () => {
  expect(sum(100)).toEqual(100);
});

test('no numbers', () => {
  expect(sum()).toEqual(0);
});
